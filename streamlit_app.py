import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import base64
st.set_page_config(
    page_title="Fake Image Detector",
    page_icon="üß†",
    layout="centered",
    initial_sidebar_state="collapsed"
)
# Load model
@st.cache_resource
def load_model():
    model = tf.keras.models.load_model("E:/Streamlit_New/mobilenet_fakeness_classifier.h5")
    return model

model = load_model()
class_names = ['DCGAN', 'Real', 'StackGAN', 'StyleGAN']

# Page config
# st.set_page_config(
    # page_title="Fake Image Detector",
    # page_icon="üß†",
    # layout="centered",
    # initial_sidebar_state="collapsed"
# )

# Background image base64
def get_base64_image(image_path):
    with open(image_path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# Background image path
image_path = "E:/Streamlit_New/3661054.jpg"
encoded_bg = get_base64_image(image_path)

# Custom CSS styling
st.markdown(f"""
    <style>
    body {{
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }}
    .stApp {{
        background: url("data:image/jpeg;base64,{encoded_bg}") no-repeat center center fixed;
        background-size: cover;
        animation: zoomBackground 60s infinite alternate;
    }}
    @keyframes zoomBackground {{
        0% {{ background-size: 100% 100%; }}
        100% {{ background-size: 110% 110%; }}
    }}
    h1, h2, h3, h4, h5, h6, p, strong, div, label, span {{
        color: #ffffff !important;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.6);
    }}
    .frosted {{
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        padding: 2rem;
        border-radius: 15px;
        margin-top: 2rem;
    }}
    /* üëá BLUR applied to uploaded file name */
    .stFileUploaderFileName {{
        background: rgba(255, 255, 255, 0.15) !important;
        backdrop-filter: blur(8px) !important;
        -webkit-backdrop-filter: blur(8px) !important;
        border-radius: 8px !important;
        padding: 6px 12px !important;
        color: white !important;
        font-weight: 600 !important;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.6);
        margin-top: 5px;
        display: inline-block;
    }}
    </style>
""", unsafe_allow_html=True)

# Main content
with st.container():
    # Title
    st.markdown(""""
    <div style='text-align: center; font-size: 25px;
                background: rgba(255, 255, 255, 0.15);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                padding: 1rem;
                border-radius: 10px;
                margin-bottom: 2rem;'>
        <h1> Fake Image Detector </h1>
    </div>
    """, unsafe_allow_html=True)

    # Subtitle
    st.markdown("""
    <div style='text-align: center; font-size: 25px;
                background: rgba(255, 255, 255, 0.15);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                padding: 1rem;
                border-radius: 10px;
                margin-bottom: 2rem;'>
        Upload an image to detect whether it's <b>Real</b> or generated by <b>GANs</b> (DCGAN, StackGAN, StyleGAN)
    </div>
    """, unsafe_allow_html=True)

    st.markdown("### üì§ Upload your image")
    uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file).convert("RGB")

        # Display image
        st.markdown("### üñºÔ∏è Uploaded Image Preview")
        st.image(image, use_column_width=True)

        # Preprocess
        image_resized = image.resize((128, 128))
        img_array = np.array(image_resized)
        img_array = preprocess_input(img_array)
        img_batch = np.expand_dims(img_array, axis=0)

        # Prediction
        prediction = model.predict(img_batch)
        predicted_class = np.argmax(prediction)
        confidence = np.max(prediction)

        # Result
        st.markdown("### üîç Prediction Result")
        result_color = "#4CAF50" if class_names[predicted_class] == "Real" else "#f44336"
        st.markdown(f"""
            <div style='text-align:center; padding:10px; border-radius:10px; background-color:{result_color}; color:white;'>
                <h3>{class_names[predicted_class]} Image</h3>
                <p>Confidence: {confidence * 100:.2f}%</p>
            </div>
        """, unsafe_allow_html=True)

        # Class Probabilities
        st.markdown("### üìä Class Probabilities")
        for i, prob in enumerate(prediction[0]):
            bar_color = "#4CAF50" if class_names[i] == "Real" else "#2196F3"
            st.markdown(f"""
                <div style='margin-bottom:10px;'>
                    <strong>{class_names[i]}</strong> - {prob * 100:.2f}%
                    <div style='background-color:#ddd; border-radius:5px;'>
                        <div style='width:{prob*100:.2f}%; background-color:{bar_color}; padding:5px; border-radius:5px;'></div>
                    </div>
                </div>
            """, unsafe_allow_html=True)

        # Raw Output
        with st.expander("üî¨ Raw Prediction Output"):
            st.write(prediction)

    st.markdown("</div>", unsafe_allow_html=True)
